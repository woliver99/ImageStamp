name: Build and Release Image Stamper

on:
  push:
    branches:
      - main

jobs:
  build-windows:
    name: Build Windows Executable
    runs-on: windows-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up Python 3.12.8
      - name: Set up Python 3.12.8
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.8'

      # Step 3: Cache pip dependencies
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Step 4: Install dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller  # Explicitly install PyInstaller

      # Step 5: Build Executable with PyInstaller
      - name: Build Executable
        run: |
          pyinstaller --onefile --windowed --icon=icon.icns --name "ImageStamper" main.py

      # Step 6: Upload Windows Executable as Artifact
      - name: Upload Windows Executable
        uses: actions/upload-artifact@v3
        with:
          name: ImageStamper-windows
          path: ./dist/ImageStamper.exe

  build-macos:
    name: Build macOS Executable (Universal)
    runs-on: macos-latest
  
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3
  
      # Step 2: Set up Python 3.12.8 with universal2 architecture
      - name: Set up Python 3.12.8 (universal2)
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.8'
  
      # Step 3: Install Homebrew
      - name: Install Homebrew
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          # Append Homebrew's bin directory to the PATH for subsequent steps
          echo "/opt/homebrew/bin" >> $GITHUB_PATH
        shell: bash
  
      # Step 4: Install Build Tools
      - name: Install Build Tools
        run: |
          brew install cmake pkg-config
        shell: bash
  
      # Step 5: Build libjpeg-turbo as universal2
      - name: Build libjpeg-turbo as universal2
        run: |
          git clone https://github.com/libjpeg-turbo/libjpeg-turbo.git /tmp/libjpeg-turbo
          cd /tmp/libjpeg-turbo
          mkdir build && cd build
          cmake .. -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" -DENABLE_SHARED=ON -DCMAKE_INSTALL_PREFIX=/usr/local
          make -j$(sysctl -n hw.ncpu)
          make install
        shell: bash
  
      # Step 6: Verify libjpeg installation
      - name: Verify libjpeg installation
        run: |
          lipo -info /usr/local/lib/libjpeg.dylib
        shell: bash
  
      # Step 7: Set Environment Variables for Pillow
      - name: Set Environment Variables for Pillow
        run: |
          echo "CPPFLAGS=-I/usr/local/include" >> $GITHUB_ENV
          echo "LDFLAGS=-L/usr/local/lib" >> $GITHUB_ENV
        shell: bash
  
      # Step 8: Cache pip dependencies
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
  
      # Step 9: Install dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          # Force build Pillow from source to ensure universal2 support
          pip install --no-binary Pillow Pillow
          # Install remaining dependencies normally
          pip install -r requirements.txt
          pip install pyinstaller
        shell: bash
  
      # Step 10: Build Executable with PyInstaller (Universal) and include libjpeg.dylib
      - name: Build Executable with PyInstaller
        run: |
          pyinstaller --onefile --windowed --icon=icon.icns --name "ImageStamper" --target-arch universal2 main.py --add-binary "/usr/local/lib/libjpeg.dylib:."
        shell: bash
  
      # Step 11: Upload macOS Executable as Artifact
      - name: Upload macOS Executable
        uses: actions/upload-artifact@v3
        with:
          name: ImageStamper-macos
          path: ./dist/ImageStamper  # PyInstaller creates an executable without extension on macOS

  release:
    name: Create GitHub Release
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest

    steps:
      # Step 1: Download Windows Executable Artifact
      - name: Download Windows Executable
        uses: actions/download-artifact@v3
        with:
          name: ImageStamper-windows
          path: ./windows

      # Step 2: Download macOS Executable Artifact
      - name: Download macOS Executable
        uses: actions/download-artifact@v3
        with:
          name: ImageStamper-macos
          path: ./macos

      # Step 3: Create Git Tag
      - name: Create Git Tag
        id: create_tag
        shell: bash
        run: |
          # Generate a tag name using the short commit SHA
          TAG_NAME="build-${GITHUB_SHA::7}"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

      # Step 4: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: "Build ${{ env.TAG_NAME }}"
          draft: false
          prerelease: false

      # Step 5: Upload Windows Executable to Release
      - name: Upload Windows Executable to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows/ImageStamper.exe
          asset_name: ImageStamper-windows.exe
          asset_content_type: application/octet-stream

      # Step 6: Upload macOS Executable to Release
      - name: Upload macOS Executable to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./macos/ImageStamper
          asset_name: ImageStamper-macos
          asset_content_type: application/octet-stream
