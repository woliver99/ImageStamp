name: Build and Release Image Stamper

# Trigger the workflow on push events to the main branch
on:
  push:
    branches:
      - main

jobs:
  build-windows:
    name: Build Windows Executable
    runs-on: windows-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up Python 3.10
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Step 3: Install dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # Step 4: Build Executable with PyInstaller
      - name: Build Executable
        run: |
          pyinstaller --windowed --icon=icon.icns --name "ImageStamper" main.py

      # Step 5: Upload Windows Executable as Artifact
      - name: Upload Windows Executable
        uses: actions/upload-artifact@v3
        with:
          name: ImageStamper-windows
          path: ./dist/ImageStamper.exe

  build-macos-intel:
    name: Build macOS Executable for Intel (x86_64)
    runs-on: macos-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up Python 3.10
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Step 3: Install dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # Step 4: Build Executable for Intel using Rosetta
      - name: Install Rosetta 2 (if not already installed)
        if: runner.os == 'macOS'
        run: |
          /usr/sbin/softwareupdate --install-rosetta --agree-to-license

      - name: Build Executable for Intel
        run: |
          arch -x86_64 pyinstaller --windowed --icon=icon.icns --name "ImageStamper-intel" main.py

      # Step 5: Upload macOS Intel Executable as Artifact
      - name: Upload macOS Intel Executable
        uses: actions/upload-artifact@v3
        with:
          name: ImageStamper-macos-intel
          path: ./dist/ImageStamper-intel.app

  build-macos-arm64:
    name: Build macOS Executable for Apple Silicon (arm64)
    runs-on: macos-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up Python 3.10
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Step 3: Install dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # Step 4: Build Executable for Apple Silicon
      - name: Build Executable for Apple Silicon
        run: |
          pyinstaller --windowed --icon=icon.icns --name "ImageStamper-arm64" main.py

      # Step 5: Upload macOS Apple Silicon Executable as Artifact
      - name: Upload macOS Apple Silicon Executable
        uses: actions/upload-artifact@v3
        with:
          name: ImageStamper-macos-arm64
          path: ./dist/ImageStamper-arm64.app

  release:
    name: Create GitHub Release
    needs: [build-windows, build-macos-intel, build-macos-arm64]
    runs-on: ubuntu-latest

    steps:
      # Step 1: Download Windows Executable Artifact
      - name: Download Windows Executable
        uses: actions/download-artifact@v3
        with:
          name: ImageStamper-windows
          path: ./windows

      # Step 2: Download macOS Intel Executable Artifact
      - name: Download macOS Intel Executable
        uses: actions/download-artifact@v3
        with:
          name: ImageStamper-macos-intel
          path: ./macos-intel

      # Step 3: Download macOS Apple Silicon Executable Artifact
      - name: Download macOS Apple Silicon Executable
        uses: actions/download-artifact@v3
        with:
          name: ImageStamper-macos-arm64
          path: ./macos-arm64

      # Step 4: Create Git Tag
      - name: Create Git Tag
        id: create_tag
        shell: bash
        run: |
          # Generate a tag name using the short commit SHA
          TAG_NAME="build-${GITHUB_SHA::7}"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

      # Step 5: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: "Build ${{ env.TAG_NAME }}"
          draft: false
          prerelease: false

      # Step 6: Upload Windows Executable to Release
      - name: Upload Windows Executable to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows/ImageStamper.exe
          asset_name: ImageStamper-windows.exe
          asset_content_type: application/octet-stream

      # Step 7: Upload macOS Intel Executable to Release
      - name: Upload macOS Intel Executable to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./macos-intel/ImageStamper-intel.app
          asset_name: ImageStamper-macos-intel.app
          asset_content_type: application/octet-stream

      # Step 8: Upload macOS Apple Silicon Executable to Release
      - name: Upload macOS Apple Silicon Executable to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./macos-arm64/ImageStamper-arm64.app
          asset_name: ImageStamper-macos-arm64.app
          asset_content_type: application/octet-stream
